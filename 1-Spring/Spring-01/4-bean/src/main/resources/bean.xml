<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 把对象的创建交给spring来管理 -->
    <!-- spring对bean的管理细节
         1.创建bean的三种方式
         2.bean对象的作用范围
         3.bean对象的生命周期
     -->

    <!-- 创建bean的3种方式 -->
    <!-- 1.使用默认构造函数创建
        在spring的配置文件种使用bean标签，配置id和class属性，且没有其他属性和标签时。
        采用的是默认构造函数创建bean对象，此使如果类中没有默认构造函数，则对象无法创建。
     -->
    <!--bean id="accountService" class="com.sake.service.impl.AccountServiceImpl"/-->

    <!-- 2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）  -->
    <!--
    <bean id="InstanceFactory" class="com.sake.factory.InstanceFactory" />
    <bean id="accountService" factory-bean="InstanceFactory" factory-method="getAccountServiceByFactory"/>
    -->

    <!-- 3.使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器） -->
    <!--bean id="accountService" class="com.sake.factory.StaticFactory" factory-method="getAccountServiceByStaticFactory"/-->


    <!-- bean的作用范围 -->
    <!--
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：
                singleton:单例（默认）
                prototype:多例
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，等于session
     -->
    <!--bean id="accountService" class="com.sake.service.impl.AccountServiceImpl" scope="prototype"/-->


    <!-- bean对象的生命周期 -->
    <!--
        单例对象：
            出生：当容器创建时，对象出生
            活着：只要容器还存在，对象一直活着
            死亡：容器销毁，对象消亡
            总结：单例对象的生命周期和容器相同
    -->
    <bean id="accountService" class="com.sake.service.impl.AccountServiceImpl"
          scope="singleton" init-method="init" destroy-method="destory"/>

    <!--
        多例对象：
            出生:当我们使用对象时，spring框架为我们创建
            活着：对象在使用过程中就一直或活着
            死亡：当对象长时间不用且没有别的对象引用时，由Java的垃圾回收器回收
    -->
    <!--bean id="accountService" class="com.sake.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destory"/-->


</beans>